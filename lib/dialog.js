// Generated by CoffeeScript 1.4.0
(function() {
  var attach, factory, jQuery, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  factory = function($, attach) {
    var Dialog;
    Dialog = (function() {

      Dialog.prototype.header = '';

      Dialog.prototype.content = '';

      Dialog.prototype.buttons = null;

      Dialog.prototype.attachment = null;

      Dialog.prototype.openImmediately = false;

      Dialog.prototype.destroyOnClose = false;

      Dialog.prototype.destructionDelay = 500;

      Dialog.prototype.attachmentDelay = 125;

      Dialog.prototype.el = null;

      function Dialog(params) {
        var property, value,
          _this = this;
        if (params == null) {
          params = {};
        }
        this._destroy = __bind(this._destroy, this);

        this._attach = __bind(this._attach, this);

        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          if (property in this) {
            this[property] = value;
          }
        }
        this.buttons || (this.buttons = []);
        this.attachment || (this.attachment = {
          to: null,
          at: {}
        });
        this.el || (this.el = $("<div class='hidden zootorial-dialog'></div>"));
        if (!(this.el instanceof $)) {
          this.el = $(this.el);
        }
        this.el.html("<button name=\"close\">&times;</button>\n<div class=\"header\"></div>\n<div class=\"content\"></div>\n<div class=\"footer\"></div>");
        this.el.on('click', 'button[name="close"]', function() {
          return _this.close();
        });
        this.render();
        this.el.appendTo('body');
        if (this.openImmediately) {
          this.open();
        }
      }

      Dialog.prototype.render = function() {
        var button, content, footer, header, i, key, part, section, texts, value, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        header = this.el.find('.header').first();
        content = this.el.find('.content').first();
        footer = this.el.find('.footer').last();
        texts = {
          header: null,
          content: null
        };
        _ref = ['header', 'content'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          section = _ref[_i];
          part = this[section];
          if (typeof part === 'string') {
            part = part.split('\n');
          }
          if (part instanceof Array) {
            part = $("<p>" + (part.join('</p><p>')) + "</p>");
          }
          texts[section] = part;
        }
        header.empty().append(texts.header);
        content.empty().append(texts.content);
        footer.empty();
        _ref1 = this.buttons;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          button = _ref1[i];
          if ((_ref2 = typeof button) === 'string' || _ref2 === 'number') {
            button = $("<button data-index='" + i + "'>" + button + "</button>");
          } else {
            for (key in button) {
              value = button[key];
              button = $("<button value='" + value + "'>" + key + "</button>");
            }
          }
          footer.append(button);
        }
        return this.attach();
      };

      Dialog.prototype.attach = function() {
        return setTimeout(this._attach, this.attachmentDelay);
      };

      Dialog.prototype._attach = function() {
        var atPos, elPos, margin;
        elPos = [this.attachment.x, this.attachment.y];
        atPos = [this.attachment.at.x, this.attachment.at.y];
        margin = this.attachment.margin || this.attachment.at.margin;
        return attach(this.el, elPos, this.attachment.to, atPos, {
          margin: margin
        });
      };

      Dialog.prototype.open = function() {
        this.el.removeClass('hidden');
        return $(window).on('resize', this._attach);
      };

      Dialog.prototype.close = function() {
        this.el.addClass('hidden');
        $(window).off('resize', this._attach);
        if (this.destroyOnClose) {
          return this.destroy();
        }
      };

      Dialog.prototype.destroy = function() {
        return setTimeout(this._destroy, this.destructionDelay);
      };

      Dialog.prototype._destroy = function() {
        return this.el.remove();
      };

      return Dialog;

    })();
    return Dialog;
  };

  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['jquery', './attach'], factory);
  } else {
    jQuery = window.jQuery;
    attach = (_ref = window.zootorial) != null ? _ref.attach : void 0;
    if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      if (attach == null) {
        attach = require('./attach');
      }
      module.exports = factory(jQuery, attach);
    } else {
      if ((_ref1 = window.zootorial) == null) {
        window.zootorial = {};
      }
      window.zootorial.Dialog = factory(jQuery, attach);
    }
  }

}).call(this);
