// Generated by CoffeeScript 1.4.0
(function() {
  var attach, factory, jQuery, wait, _ref, _ref1,
    __hasProp = {}.hasOwnProperty;

  wait = function(time, fn) {
    var _ref;
    if (typeof time === 'function') {
      _ref = [0, time], time = _ref[0], fn = _ref[1];
    }
    return setTimeout(fn, time);
  };

  factory = function($, attach) {
    var Dialog;
    Dialog = (function() {

      Dialog.prototype.header = '';

      Dialog.prototype.content = '';

      Dialog.prototype.buttons = null;

      Dialog.prototype.attachment = null;

      Dialog.prototype.destructionDelay = 500;

      Dialog.prototype.attachmentDelay = 60;

      Dialog.prototype.el = null;

      Dialog.prototype.headerContainer = null;

      Dialog.prototype.contentContainer = null;

      Dialog.prototype.buttonConatiner = null;

      Dialog.prototype.boundAttach = null;

      function Dialog(params) {
        var children, property, value,
          _this = this;
        if (params == null) {
          params = {};
        }
        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          if (property in this) {
            this[property] = value;
          }
        }
        this.buttons || (this.buttons = []);
        this.attachment || (this.attachment = {
          to: null,
          at: {}
        });
        this.el = $('<div class="zootorial-dialog">\n  <button name="close">&times;</button>\n  <div class="header"></div>\n  <div class="content"></div>\n  <div class="footer"></div>\n</div>');
        children = this.el.children();
        this.headerContainer = children.filter('.header');
        this.contentContainer = children.filter('.content');
        this.buttonConatiner = children.filter('.footer');
        this.el.on('click', 'button[name="close"]', function() {
          return _this.close();
        });
        this.render();
        this.el.css({
          display: 'none'
        });
        this.el.appendTo('body');
      }

      Dialog.prototype.render = function() {
        var button, i, key, value, _i, _len, _ref, _ref1, _results;
        this.headerContainer.html(this.header);
        this.contentContainer.html(this.content);
        this.buttonConatiner.empty();
        _ref = this.buttons;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          button = _ref[i];
          if ((_ref1 = typeof button) === 'string' || _ref1 === 'number') {
            button = $("<button data-index='" + i + "'>" + button + "</button>");
          } else {
            for (key in button) {
              value = button[key];
              button = $("<button value='" + value + "'>" + key + "</button>");
            }
          }
          _results.push(this.buttonConatiner.append(button));
        }
        return _results;
      };

      Dialog.prototype.attach = function() {
        var _this = this;
        return wait(this.attachmentDelay, function() {
          var atPos, elPos, margin;
          elPos = [_this.attachment.x, _this.attachment.y];
          atPos = [_this.attachment.at.x, _this.attachment.at.y];
          margin = _this.attachment.margin || _this.attachment.at.margin;
          attach(_this.el, elPos, _this.attachment.to, atPos, {
            margin: margin
          });
          return _this.el.trigger('attach-dialog');
        });
      };

      Dialog.prototype.open = function() {
        var _this = this;
        this.el.css({
          display: ''
        });
        return wait(function() {
          _this.el.removeClass('hidden');
          _this.attach();
          _this.boundAttach = function() {
            return _this.attach();
          };
          $(window).on('resize', _this.boundAttach);
          return _this.el.trigger('open-dialog');
        });
      };

      Dialog.prototype.close = function() {
        var _this = this;
        this.el.addClass('hidden');
        return wait(this.destructionDelay, function() {
          _this.el.css({
            display: 'none'
          });
          $(window).off('resize', _this.boundAttach);
          _this.boundAttach = null;
          return _this.el.trigger('close-dialog');
        });
      };

      Dialog.prototype.destroy = function() {
        var _this = this;
        return wait(this.destructionDelay, function() {
          _this.el.trigger('destroy-dialog');
          _this.el.remove();
          return _this.el.off();
        });
      };

      return Dialog;

    })();
    return Dialog;
  };

  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['jquery', './attach'], factory);
  } else {
    jQuery = window.jQuery;
    attach = (_ref = window.zootorial) != null ? _ref.attach : void 0;
    if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      if (attach == null) {
        attach = require('./attach');
      }
      module.exports = factory(jQuery, attach);
    } else {
      if ((_ref1 = window.zootorial) == null) {
        window.zootorial = {};
      }
      window.zootorial.Dialog = factory(jQuery, attach);
    }
  }

}).call(this);
