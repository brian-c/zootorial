// Generated by CoffeeScript 1.4.0
(function() {
  var Dialog, Step, factory, jQuery, _ref, _ref1, _ref2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  factory = function($, Step, Dialog) {
    var Tutorial;
    Tutorial = (function() {

      Tutorial.Step = Step;

      Tutorial.prototype.steps = null;

      Tutorial.prototype.step = -1;

      Tutorial.prototype.hidden = false;

      function Tutorial(params) {
        var property, value,
          _this = this;
        if (params == null) {
          params = {};
        }
        this.end = __bind(this.end, this);

        this.goTo = __bind(this.goTo, this);

        this.next = __bind(this.next, this);

        this.start = __bind(this.start, this);

        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          if (property in this) {
            this[property] = value;
          }
        }
        this.dialog = new Dialog(params);
        this.dialog.el.on('click', 'button[name="close"]', function() {
          return _this.end();
        });
      }

      Tutorial.prototype.start = function() {
        this.dialog.el.trigger('start-tutorial');
        this.dialog.el.addClass('tutorial');
        this.goTo(0);
        return this.dialog.open();
      };

      Tutorial.prototype.next = function() {
        return this.goTo(this.step + 1);
      };

      Tutorial.prototype.goTo = function(step) {
        var _ref;
        if ((_ref = this.steps[this.step]) != null) {
          _ref.exit(this);
        }
        this.step = step;
        if (this.steps[this.step]) {
          return this.steps[this.step].enter(this);
        } else {
          return this.end();
        }
      };

      Tutorial.prototype.hide = function() {
        var step;
        this.hidden = true;
        step = this.steps[this.step];
        if (step == null) {
          return;
        }
        step.exit(this);
        return this.dialog.close();
      };

      Tutorial.prototype.show = function() {
        var step;
        if (!this.hidden) {
          return;
        }
        step = this.steps[this.step];
        if (step == null) {
          return;
        }
        step.enter(this);
        this.dialog.open();
        return this.hidden = false;
      };

      Tutorial.prototype.end = function() {
        var _ref;
        this.dialog.el.trigger('end-tutorial');
        this.dialog.el.removeClass('tutorial');
        if ((_ref = this.steps[this.step]) != null) {
          _ref.exit(this);
        }
        this.dialog.close();
        return this.step = -1;
      };

      return Tutorial;

    })();
    return Tutorial;
  };

  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['jquery', './step', './dialog'], factory);
  } else {
    jQuery = window.jQuery;
    Step = (_ref = window.zootorial) != null ? _ref.Step : void 0;
    Dialog = (_ref1 = window.zootorial) != null ? _ref1.Dialog : void 0;
    if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      if (Step == null) {
        Step = require('./step');
      }
      if (Dialog == null) {
        Dialog = require('./dialog');
      }
      module.exports = factory(jQuery, Dialog);
    } else {
      if ((_ref2 = window.zootorial) == null) {
        window.zootorial = {};
      }
      window.zootorial.Tutorial = factory(jQuery, Step, Dialog);
    }
  }

}).call(this);
