// Generated by CoffeeScript 1.4.0
(function() {
  var Dialog, factory, jQuery, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  factory = function($, Dialog) {
    var Tutorial;
    Tutorial = (function() {

      Tutorial.prototype.steps = null;

      Tutorial.prototype.step = -1;

      Tutorial.prototype.hidden = false;

      function Tutorial(params) {
        var property, value,
          _this = this;
        if (params == null) {
          params = {};
        }
        this.end = __bind(this.end, this);

        this.goTo = __bind(this.goTo, this);

        this.next = __bind(this.next, this);

        this.start = __bind(this.start, this);

        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          if (property in this) {
            this[property] = value;
          }
        }
        this.dialog = new Dialog(params);
        this.dialog.el.on('click', 'button[name="close"]', function() {
          return _this.end();
        });
      }

      Tutorial.prototype.start = function() {
        this.dialog.el.trigger('start-tutorial');
        this.dialog.el.addClass('tutorial');
        this.goTo(0);
        return this.dialog.open();
      };

      Tutorial.prototype.next = function() {
        return this.goTo(this.step + 1);
      };

      Tutorial.prototype.goTo = function(step) {
        var _ref;
        if ((_ref = this.steps[this.step]) != null) {
          _ref.exit(this);
        }
        this.step = step;
        if (this.steps[this.step]) {
          return this.steps[this.step].enter(this);
        } else {
          return this.end();
        }
      };

      Tutorial.prototype.hide = function() {
        var step;
        this.hidden = true;
        step = this.steps[this.step];
        if (step == null) {
          return;
        }
        step.exit(this);
        return this.dialog.close();
      };

      Tutorial.prototype.show = function() {
        var step;
        if (!this.hidden) {
          return;
        }
        step = this.steps[this.step];
        if (step == null) {
          return;
        }
        step.enter(this);
        this.dialog.open();
        return this.hidden = false;
      };

      Tutorial.prototype.end = function() {
        var _ref;
        this.dialog.el.trigger('end-tutorial');
        this.dialog.el.removeClass('tutorial');
        if ((_ref = this.steps[this.step]) != null) {
          _ref.exit(this);
        }
        this.dialog.close();
        return this.step = -1;
      };

      Tutorial.Step = (function() {

        Step.prototype.header = '';

        Step.prototype.content = '';

        Step.prototype.buttons = null;

        Step.prototype.defaultButton = 'Continue';

        Step.prototype.attachment = null;

        Step.prototype.className = '';

        Step.prototype.nextOn = null;

        Step.prototype.block = '';

        Step.prototype.focus = '';

        Step.prototype.onEnter = null;

        Step.prototype.onExit = null;

        Step.prototype.blockers = null;

        Step.prototype.focusers = null;

        function Step(params) {
          var button, property, value, _base;
          if (params == null) {
            params = {};
          }
          for (property in params) {
            if (!__hasProp.call(params, property)) continue;
            value = params[property];
            if (property in this) {
              this[property] = value;
            }
          }
          if ((!this.buttons) && (!this.nextOn)) {
            button = {};
            button[this.defaultButton] = 'ZOOTORIAL_NEXT';
            this.buttons = [button];
            this.nextOn = {
              click: 'button[value="ZOOTORIAL_NEXT"]'
            };
          }
          this.buttons || (this.buttons = []);
          this.attachment || (this.attachment = {
            to: null
          });
          (_base = this.attachment).at || (_base.at = {});
          this.nextOn || (this.nextOn = {
            click: '.tutorial.zootorial-dialog'
          });
        }

        Step.prototype.createBlockers = function() {
          var blocked, blocker, _i, _len, _ref, _results;
          this.blockers = $();
          _ref = $(this.block);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            blocked = _ref[_i];
            blocked = $(blocked);
            blocker = $('<div class="hidden zootorial-blocker"></div>');
            blocker.width(blocked.outerWidth());
            blocker.height(blocked.outerHeight());
            blocker.offset(blocked.offset());
            _results.push(this.blockers = this.blockers.add(blocker));
          }
          return _results;
        };

        Step.prototype.createFocusers = function() {
          var above, bottom, focus, height, left, offset, right, totalHeight, totalWidth, width;
          this.focusers = $((new Array(4 + 1)).join('<div class="hidden zootorial-focuser"></div>'));
          focus = $(this.focus).filter(':visible').first();
          if (focus.length === 0) {
            return;
          }
          offset = focus.offset();
          width = focus.outerWidth();
          height = focus.outerHeight();
          totalHeight = $('html').outerHeight();
          totalWidth = $('html').outerWidth();
          above = this.focusers.eq(0);
          above.offset({
            left: 0,
            top: 0
          });
          above.width('100%');
          above.height(offset.top);
          right = this.focusers.eq(1);
          right.offset({
            left: offset.left + width,
            top: offset.top
          });
          right.width(totalWidth - offset.left - width);
          right.height(height);
          bottom = this.focusers.eq(2);
          bottom.offset({
            left: 0,
            top: offset.top + height
          });
          bottom.width('100%');
          bottom.height(totalHeight - offset.top - height);
          left = this.focusers.eq(3);
          left.offset({
            left: 0,
            top: offset.top
          });
          left.width(offset.left);
          return left.height(height);
        };

        Step.prototype.enter = function(tutorial) {
          var eventName, extras, selector, _ref;
          tutorial.dialog.el.trigger('enter-tutorial-step', [tutorial.step, this]);
          if (typeof this.onEnter === "function") {
            this.onEnter(tutorial, this);
          }
          tutorial.dialog.attachment = this.attachment;
          tutorial.dialog.header = this.header;
          tutorial.dialog.content = this.content;
          tutorial.dialog.buttons = this.buttons;
          tutorial.dialog.render();
          if (this.className) {
            tutorial.dialog.el.addClass(this.className);
          }
          _ref = this.nextOn;
          for (eventName in _ref) {
            selector = _ref[eventName];
            $(document).on(eventName, selector, tutorial.next);
          }
          this.createBlockers();
          this.createFocusers();
          extras = this.blockers.add(this.focusers);
          extras.appendTo('body');
          extras.css({
            position: ''
          });
          return setTimeout($.proxy($.prototype.removeClass, extras, 'hidden'), tutorial.dialog.attachmentDelay);
        };

        Step.prototype.exit = function(tutorial) {
          var eventName, extras, selector, _ref;
          tutorial.dialog.el.trigger('exit-tutorial-step', [tutorial.step, this]);
          if (typeof this.onExit === "function") {
            this.onExit(tutorial, this);
          }
          if (this.className) {
            tutorial.dialog.el.removeClass(this.className);
          }
          _ref = this.nextOn;
          for (eventName in _ref) {
            selector = _ref[eventName];
            $(document).off(eventName, selector, tutorial.next);
          }
          extras = this.blockers.add(this.focusers);
          extras.addClass('hidden');
          return setTimeout($.proxy($.prototype.remove, extras), tutorial.dialog.attachmentDelay);
        };

        return Step;

      })();

      return Tutorial;

    })();
    return Tutorial;
  };

  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['jquery', './dialog'], factory);
  } else {
    jQuery = window.jQuery;
    Dialog = (_ref = window.zootorial) != null ? _ref.Dialog : void 0;
    if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      if (Dialog == null) {
        Dialog = require('./dialog');
      }
      module.exports = factory(jQuery, Dialog);
    } else {
      if ((_ref1 = window.zootorial) == null) {
        window.zootorial = {};
      }
      window.zootorial.Tutorial = factory(jQuery, Dialog);
    }
  }

}).call(this);
