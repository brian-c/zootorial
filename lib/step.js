// Generated by CoffeeScript 1.4.0
(function() {
  var factory, jQuery, _ref,
    __hasProp = {}.hasOwnProperty;

  factory = function($) {
    var Step;
    Step = (function() {

      Step.prototype.className = '';

      Step.prototype.header = '';

      Step.prototype.content = '';

      Step.prototype.attachment = null;

      Step.prototype.buttons = null;

      Step.prototype.nextOn = null;

      Step.prototype.defaultButton = 'Continue';

      Step.prototype.block = '';

      Step.prototype.focus = '';

      Step.prototype.onEnter = null;

      Step.prototype.onExit = null;

      Step.prototype.tutorialNext = null;

      Step.prototype.blockers = null;

      Step.prototype.focusers = null;

      function Step(params) {
        var button, property, value, _base, _ref, _ref1, _ref2, _ref3;
        if (params == null) {
          params = {};
        }
        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          if (property in this) {
            this[property] = value;
          }
        }
        if ((_ref = this.attachment) == null) {
          this.attachment = {
            to: null
          };
        }
        if ((_ref1 = (_base = this.attachment).at) == null) {
          _base.at = {};
        }
        if ((!this.buttons) && (!this.nextOn)) {
          button = {};
          button[this.defaultButton] = 'ZOOTORIAL_NEXT';
          this.buttons = [button];
          this.nextOn = {
            click: 'button[value="ZOOTORIAL_NEXT"]'
          };
        }
        if ((_ref2 = this.buttons) == null) {
          this.buttons = [];
        }
        if ((_ref3 = this.nextOn) == null) {
          this.nextOn = {
            click: '.tutorial.zootorial-dialog'
          };
        }
      }

      Step.prototype.createBlockers = function() {
        var blocked, blocker, _i, _len, _ref, _results;
        this.blockers = $();
        _ref = $(this.block);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          blocked = _ref[_i];
          blocked = $(blocked);
          blocker = $('<div class="hidden zootorial-blocker"></div>');
          blocker.width(blocked.outerWidth());
          blocker.height(blocked.outerHeight());
          blocker.offset(blocked.offset());
          _results.push(this.blockers = this.blockers.add(blocker));
        }
        return _results;
      };

      Step.prototype.createFocusers = function() {
        var above, bottom, focus, focuserMarkup, height, left, offset, right, totalHeight, totalWidth, width;
        focuserMarkup = '<div class="hidden zootorial-focuser"></div>';
        this.focusers = $(focuserMarkup + focuserMarkup + focuserMarkup + focuserMarkup);
        focus = $(this.focus).filter(':visible').first();
        if (focus.length === 0) {
          return;
        }
        offset = focus.offset();
        width = focus.outerWidth();
        height = focus.outerHeight();
        totalHeight = $('html').outerHeight();
        totalWidth = $('html').outerWidth();
        above = this.focusers.eq(0);
        above.offset({
          left: 0,
          top: 0
        });
        above.width('100%');
        above.height(offset.top);
        right = this.focusers.eq(1);
        right.offset({
          left: offset.left + width,
          top: offset.top
        });
        right.width(totalWidth - offset.left - width);
        right.height(height);
        bottom = this.focusers.eq(2);
        bottom.offset({
          left: 0,
          top: offset.top + height
        });
        bottom.width('100%');
        bottom.height(totalHeight - offset.top - height);
        left = this.focusers.eq(3);
        left.offset({
          left: 0,
          top: offset.top
        });
        left.width(offset.left);
        return left.height(height);
      };

      Step.prototype.enter = function(tutorial) {
        var eventName, extras, selector, _ref,
          _this = this;
        tutorial.dialog.el.trigger('enter-tutorial-step', [tutorial.step, this]);
        if (typeof this.onEnter === "function") {
          this.onEnter(tutorial, this);
        }
        if (this.className) {
          tutorial.dialog.el.addClass(this.className);
        }
        tutorial.dialog.header = this.header;
        tutorial.dialog.content = this.content;
        tutorial.dialog.buttons = this.buttons;
        tutorial.dialog.attachment = this.attachment;
        tutorial.dialog.render();
        tutorial.dialog.attach();
        this.tutorialNext = function() {
          return tutorial.next();
        };
        _ref = this.nextOn;
        for (eventName in _ref) {
          selector = _ref[eventName];
          $(document).on(eventName, selector, this.tutorialNext);
        }
        this.createBlockers();
        this.createFocusers();
        extras = this.blockers.add(this.focusers);
        extras.appendTo('body');
        extras.css({
          position: 'absolute'
        });
        return setTimeout($.proxy(extras, 'removeClass', 'hidden'), tutorial.dialog.attachmentDelay);
      };

      Step.prototype.exit = function(tutorial) {
        var eventName, extras, selector, _ref;
        tutorial.dialog.el.trigger('exit-tutorial-step', [tutorial.step, this]);
        if (typeof this.onExit === "function") {
          this.onExit(tutorial, this);
        }
        if (this.className) {
          tutorial.dialog.el.removeClass(this.className);
        }
        _ref = this.nextOn;
        for (eventName in _ref) {
          selector = _ref[eventName];
          $(document).off(eventName, selector, this.tutorialNext);
        }
        extras = this.blockers.add(this.focusers);
        extras.addClass('hidden');
        return setTimeout($.proxy(extras, 'remove'), tutorial.dialog.attachmentDelay);
      };

      return Step;

    })();
    return Step;
  };

  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['jquery'], factory);
  } else {
    jQuery = window.jQuery;
    if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      module.exports = factory(jQuery);
    } else {
      if ((_ref = window.zootorial) == null) {
        window.zootorial = {};
      }
      window.zootorial.Step = factory(jQuery);
    }
  }

}).call(this);
