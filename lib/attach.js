// Generated by CoffeeScript 1.4.0
(function() {
  var factory, jQuery, _ref;

  factory = function($) {
    return function(el, _arg, to, _arg1, _arg2) {
      var elSize, elX, elY, margin, newElOffset, positions, toOffset, toSize, toX, toY, _ref, _ref1;
      _ref = _arg != null ? _arg : [], elX = _ref[0], elY = _ref[1];
      _ref1 = _arg1 != null ? _arg1 : [], toX = _ref1[0], toY = _ref1[1];
      margin = (_arg2 != null ? _arg2 : {}).margin;
      el = $(el);
      if (el.length === 0) {
        throw new Error('Couldn\'t find an element to attach.');
      }
      if (to == null) {
        to = window;
      }
      to = $(to).filter(':visible').first();
      if (to.length === 0) {
        to = $(window);
      }
      if (margin == null) {
        margin = 0;
      }
      positions = {
        left: 0,
        center: 0.5,
        right: 1,
        top: 0,
        middle: 0.5,
        bottom: 1
      };
      if (elX == null) {
        elX = 'center';
      }
      if (elX in positions) {
        elX = positions[elX];
      }
      if (elY == null) {
        elY = 'middle';
      }
      if (elY in positions) {
        elY = positions[elY];
      }
      if (toX == null) {
        toX = 'center';
      }
      if (toX in positions) {
        toX = positions[toX];
      }
      if (toY == null) {
        toY = 'middle';
      }
      if (toY in positions) {
        toY = positions[toY];
      }
      toSize = {
        width: to.outerWidth() + (margin * 2),
        height: to.outerHeight() + (margin * 2)
      };
      toOffset = to.offset() || {
        left: 0,
        top: 0
      };
      toOffset.top -= margin;
      toOffset.left -= margin;
      elSize = {
        width: el.outerWidth(),
        height: el.outerHeight()
      };
      newElOffset = {
        left: toOffset.left - (elSize.width * elX) + (toSize.width * toX),
        top: toOffset.top - (elSize.height * elY) + (toSize.height * toY)
      };
      return el.offset(newElOffset);
    };
  };

  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['jquery'], factory);
  } else {
    jQuery = window.jQuery;
    if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      module.exports = factory(jQuery);
    } else {
      if ((_ref = window.zootorial) == null) {
        window.zootorial = {};
      }
      window.zootorial.attach = factory(jQuery);
    }
  }

}).call(this);
