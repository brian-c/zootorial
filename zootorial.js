// Generated by CoffeeScript 1.6.3
(function() {
  var Tutorial, tempDiv, zootorial,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Tutorial = (function() {
    Tutorial.prototype.steps = null;

    Tutorial.prototype.first = 'first';

    Tutorial.prototype.parent = document.body;

    Tutorial.prototype.demoLabel = 'Show me';

    Tutorial.prototype.nextLabel = 'Continue';

    Tutorial.prototype.doneLabel = 'Done';

    Tutorial.prototype.attachment = [0.5, 0.5, window, 0.5, 0.5];

    Tutorial.prototype._current = null;

    Tutorial.prototype.namedPoints = {
      top: 0,
      middle: 0.5,
      bottom: 1,
      left: 0,
      center: 0.5,
      right: 1
    };

    Tutorial.prototype.transformProperty = 'transform' in document.body.style ? 'transform' : 'mozTransform' in document.body.style ? '-moz-transform' : 'msTransform' in document.body.style ? '-ms-transform' : 'webkitTransform' in document.body.style ? '-webkit-transform' : void 0;

    function Tutorial(params) {
      var property, value;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        value = params[property];
        this[property] = value;
      }
      if (this.steps == null) {
        this.steps = {};
      }
      this.container = this.createElement('div.zootorial-container');
      this.el = this.createElement('div.zootorial-tutorial', this.container);
      this.header = this.createElement('header.zootorial-header', this.el);
      this.content = this.createElement('div.zootorial-content', this.el);
      this.instruction = this.createElement('div.zootorial-instruction', this.el);
      this.footer = this.createElement('footer.zootorial-footer', this.el);
      this.delegatedEventListeners = [];
      this.blockers = [];
      this.focusers = [];
      this.actionables = [];
      this.parent.appendChild(this.container);
      this.attach();
      this.end();
    }

    Tutorial.prototype.createElement = function(tagAndClassNames, parent) {
      var classNames, el, tag, _ref;
      _ref = tagAndClassNames.split('.'), tag = _ref[0], classNames = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      el = document.createElement(tag);
      el.className = classNames.join(' ');
      if (parent != null) {
        parent.appendChild(el);
      }
      return el;
    };

    Tutorial.prototype.start = function() {
      if (typeof this.onBeforeStart === "function") {
        this.onBeforeStart();
      }
      this.el.style.opacity = 0;
      this.el.style.display = '';
      this.goTo(this.first);
      this.el.style.opacity = '';
      return typeof this.onStart === "function" ? this.onStart() : void 0;
    };

    Tutorial.prototype.end = function() {
      if (typeof this.onBeforeEnd === "function") {
        this.onBeforeEnd();
      }
      this.unloadCurrentStep();
      this.el.style.display = 'none';
      return typeof this.onEnd === "function" ? this.onEnd() : void 0;
    };

    Tutorial.prototype.goTo = function(step) {
      var times;
      if (typeof step === 'function') {
        step = step.call(this);
      }
      if (step != null) {
        if (typeof step === 'string') {
          this.unloadCurrentStep();
          return this.loadStep(this.steps[step]);
        } else if (step === false) {
          times = parseFloat(this.instruction.getAttribute('data-zootorial-attention'));
          return this.instruction.setAttribute('data-zootorial-attention', (times || 0) + 1);
        }
      } else {
        return this.end();
      }
    };

    Tutorial.prototype.loadStep = function(_current) {
      var demoButton, doneButton, eventName, eventNameAndSelector, nextButton, nextStep, section, selector, _fn, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
        _this = this;
      this._current = _current;
      if (typeof this.onBeforeLoadStep === "function") {
        this.onBeforeLoadStep();
      }
      if ((_ref = this._current.onBeforeLoad) != null) {
        _ref.call(this);
      }
      _ref1 = ['header', 'content', 'instruction'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        section = _ref1[_i];
        if (((_ref2 = this._current) != null ? _ref2[section] : void 0) != null) {
          this[section].innerHTML = this._current[section];
        } else {
          this[section].style.display = 'none';
        }
      }
      if (this._current.demo != null) {
        demoButton = this.createElement('button.zootorial-demo', this.instruction);
        demoButton.innerHTML = this._current.demoLabel || this.demoLabel;
        demoButton.onclick = function() {
          var _ref3;
          return (_ref3 = _this._current.demo).call.apply(_ref3, [_this].concat(__slice.call(arguments)));
        };
      }
      if (this._current.next != null) {
        if ((_ref3 = typeof this._current.next) === 'string' || _ref3 === 'function') {
          this.footer.style.display = '';
          nextButton = this.createElement('button.zootorial-next', this.footer);
          nextButton.innerHTML = this._current.nextLabel || this.nextLabel;
          nextButton.onclick = function() {
            return _this.goTo(_this._current.next);
          };
        } else {
          this.footer.style.display = 'none';
          _ref4 = this._current.next;
          _fn = function(eventName, selector, nextStep) {
            var delegatedHandler;
            delegatedHandler = function(e) {
              var selection, target, _results;
              selection = document.querySelectorAll(selector);
              target = e.target;
              _results = [];
              while (target != null) {
                _results.push(target = __indexOf.call(selection, target) >= 0 ? (_this.goTo(nextStep), null) : target.parentNode);
              }
              return _results;
            };
            return setTimeout(function() {
              _this.delegatedEventListeners.push([eventName, delegatedHandler]);
              return addEventListener(eventName, delegatedHandler, false);
            });
          };
          for (eventNameAndSelector in _ref4) {
            nextStep = _ref4[eventNameAndSelector];
            _ref5 = eventNameAndSelector.split(/\s+/), eventName = _ref5[0], selector = 2 <= _ref5.length ? __slice.call(_ref5, 1) : [];
            selector = selector.join(' ') || '*';
            _fn(eventName, selector, nextStep);
          }
        }
      } else {
        doneButton = this.createElement('button.zootorial-next.zootorial-done', this.footer);
        doneButton.innerHTML = this._current.doneLabel || this.doneLabel;
        doneButton.onclick = function() {
          return _this.goTo(null);
        };
      }
      if (this._current.attachment !== false) {
        this.attach();
      }
      if (this._current.block) {
        this.doToElements(this._current.block, this.block);
      }
      if (this._current.focus != null) {
        this.doToElements(this._current.focus, this.focus);
      }
      if (this._current.actionable) {
        this.doToElements(this._current.actionable, this.actionable);
      }
      if ((_ref6 = this._current.onLoad) != null) {
        _ref6.call(this);
      }
      return typeof this.onLoadStep === "function" ? this.onLoadStep() : void 0;
    };

    Tutorial.prototype.attach = function() {
      var attachment, _ref;
      attachment = ((_ref = this._current) != null ? _ref.attachment : void 0) || this.attachment;
      this.attachTo.apply(this, [this.el].concat(__slice.call(attachment)));
      return this.attachTo.apply(this, [this.el].concat(__slice.call(attachment)));
    };

    Tutorial.prototype.setPosition = function(el, left, top) {
      var offsetParent, parentLeft, parentRect, parentTop, _ref;
      offsetParent = el.offsetParent;
      if ((offsetParent != null) && getComputedStyle(offsetParent).position === 'static') {
        offsetParent = null;
      }
      _ref = offsetParent != null ? (parentRect = offsetParent.getBoundingClientRect(), [parentRect.left + pageXOffset, parentRect.top + pageYOffset]) : [0, 0], parentLeft = _ref[0], parentTop = _ref[1];
      left -= parentLeft;
      top -= parentTop;
      if (this.transformProperty != null) {
        return el.style[this.transformProperty] = "translate(" + (Math.floor(left)) + "px, " + (Math.floor(top)) + "px)";
      } else {
        el.style.position = 'absolute';
        el.style.left = "" + (Math.floor(left)) + "px";
        return el.style.top = "" + (Math.floor(top)) + "px";
      }
    };

    Tutorial.prototype.attachTo = function(el, eX, eY, target, tX, tY) {
      var left, targetHeight, targetLeft, targetTop, targetWidth, top, _ref;
      if (target == null) {
        target = window;
      }
      if (typeof el === 'string') {
        el = document.querySelector(el);
      }
      if (typeof target === 'string') {
        target = document.querySelector(target);
      }
      if (eX in this.namedPoints) {
        eX = this.namedPoints[eX];
      }
      eX = parseFloat(eX);
      if (eY in this.namedPoints) {
        eY = this.namedPoints[eY];
      }
      eY = parseFloat(eY);
      if (tX in this.namedPoints) {
        tX = this.namedPoints[tX];
      }
      tX = parseFloat(tX);
      if (tY in this.namedPoints) {
        tY = this.namedPoints[tY];
      }
      tY = parseFloat(tY);
      if (target === window) {
        targetLeft = pageXOffset;
        targetTop = pageYOffset;
        targetWidth = document.documentElement.clientWidth;
        targetHeight = document.documentElement.clientHeight;
      } else {
        _ref = target.getBoundingClientRect(), targetLeft = _ref.left, targetTop = _ref.top;
        targetLeft += pageXOffset;
        targetTop += pageYOffset;
        targetWidth = target.offsetWidth;
        targetHeight = target.offsetHeight;
      }
      left = targetLeft + (tX * targetWidth) - (eX * el.offsetWidth);
      top = targetTop + (tY * targetHeight) - (eY * el.offsetHeight);
      this.setPosition(el, left, top);
      return [left, top];
    };

    Tutorial.prototype.doToElements = function(elOrElsOrSelector, fn, context) {
      if (elOrElsOrSelector == null) {
        elOrElsOrSelector = [];
      }
      if (elOrElsOrSelector instanceof HTMLElement) {
        elOrElsOrSelector = [elOrElsOrSelector];
      } else if (typeof elOrElsOrSelector === 'string') {
        elOrElsOrSelector = document.querySelectorAll(elOrElsOrSelector);
      }
      if (elOrElsOrSelector instanceof NodeList) {
        elOrElsOrSelector = Array.prototype.slice.call(elOrElsOrSelector);
      }
      return elOrElsOrSelector.forEach(fn, context || this);
    };

    Tutorial.prototype.block = function(target) {
      var blocker, containerRect, targetRect;
      containerRect = this.container.getBoundingClientRect();
      targetRect = target.getBoundingClientRect();
      blocker = this.createElement('div.zootorial-blocker', this.container);
      blocker.style.left = "" + ((targetRect.left + pageXOffset) - containerRect.left) + "px";
      blocker.style.top = "" + ((targetRect.top + pageYOffset) - containerRect.top) + "px";
      blocker.style.width = "" + target.offsetWidth + "px";
      blocker.style.height = "" + target.offsetHeight + "px";
      return this.blockers.push(blocker);
    };

    Tutorial.prototype.focus = function(target) {
      var bottom, containerRect, html, htmlHeight, htmlWidth, left, right, targetRect, top;
      html = document.documentElement;
      containerRect = this.container.getBoundingClientRect();
      targetRect = target.getBoundingClientRect();
      htmlWidth = Math.max(html.clientWidth, html.offsetWidth);
      htmlHeight = Math.max(html.clientHeight, html.offsetHeight);
      top = this.createElement('div.top.zootorial-focuser', this.container);
      top.style.left = "" + (-containerRect.left - pageXOffset) + "px";
      top.style.top = "" + (-containerRect.top - pageYOffset) + "px";
      top.style.width = "" + (pageXOffset + htmlWidth) + "px";
      top.style.height = "" + (targetRect.top + pageYOffset) + "px";
      right = this.createElement('div.right.zootorial-focuser', this.container);
      right.style.left = "" + (targetRect.right - containerRect.left) + "px";
      right.style.top = "" + (targetRect.top - containerRect.top) + "px";
      right.style.width = "" + (htmlWidth - (targetRect.left + target.offsetWidth)) + "px";
      right.style.height = "" + target.offsetHeight + "px";
      bottom = this.createElement('div.bottom.zootorial-focuser', this.container);
      bottom.style.left = "" + (-containerRect.left - pageXOffset) + "px";
      bottom.style.top = "" + (-containerRect.top + targetRect.bottom) + "px";
      bottom.style.width = "" + (pageXOffset + htmlWidth) + "px";
      bottom.style.height = "" + (htmlHeight - (targetRect.bottom + pageYOffset)) + "px";
      left = this.createElement('div.left.zootorial-focuser', this.container);
      left.style.left = "" + (-containerRect.left - pageXOffset) + "px";
      left.style.top = "" + (-containerRect.top + targetRect.top) + "px";
      left.style.width = "" + (targetRect.left + pageXOffset) + "px";
      left.style.height = "" + target.offsetHeight + "px";
      return this.focusers.push(top, right, bottom, left);
    };

    Tutorial.prototype.actionable = function(target) {
      target.setAttribute('data-zootorial-actionable', true);
      return this.actionables.push(target);
    };

    Tutorial.prototype.unloadCurrentStep = function() {
      var blocker, delegatedHandler, eventName, focuser, section, _base, _i, _len, _ref, _ref1, _ref2;
      if (this._current != null) {
        if (typeof this.onBeforeUnloadStep === "function") {
          this.onBeforeUnloadStep();
        }
        if ((_ref = this._current.onBeforeUnload) != null) {
          _ref.call(this);
        }
        _ref1 = ['header', 'content', 'instruction', 'footer'];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          section = _ref1[_i];
          while (this[section].childNodes.length !== 0) {
            this[section].removeChild(this[section].childNodes[0]);
          }
          this[section].style.display = '';
        }
        while (this.delegatedEventListeners.length !== 0) {
          _ref2 = this.delegatedEventListeners.shift(), eventName = _ref2[0], delegatedHandler = _ref2[1];
          removeEventListener(eventName, delegatedHandler, false);
        }
        while (this.blockers.length !== 0) {
          blocker = this.blockers.shift();
          blocker.parentNode.removeChild(blocker);
        }
        while (this.focusers.length !== 0) {
          focuser = this.focusers.shift();
          focuser.parentNode.removeChild(focuser);
        }
        while (this.actionables.length !== 0) {
          this.actionables.shift().removeAttribute('data-zootorial-actionable');
        }
        this.instruction.removeAttribute('data-zootorial-attention');
        if (typeof (_base = this._current).onUnload === "function") {
          _base.onUnload();
        }
        if (typeof this.onUnloadStep === "function") {
          this.onUnloadStep();
        }
      }
      return this._current = null;
    };

    Tutorial.prototype.destroy = function() {
      if (typeof this.onBeforeDestroy === "function") {
        this.onBeforeDestroy();
      }
      this.end();
      return typeof this.onDestroy === "function" ? this.onDestroy() : void 0;
    };

    return Tutorial;

  })();

  document.body.insertAdjacentHTML('afterBegin', '<div id="zootorial-temp" style="display: none;">\n  <style class="zootorial-defaults">\n    .zootorial-container {\n      left: 0;\n      position: absolute;\n      top: 0;\n      width: 100%;\n      z-index: 1;\n    }\n\n    .zootorial-tutorial {\n      left: 0;\n      position: absolute;\n      top: 0;\n      z-index: 1;\n    }\n\n    .zootorial-blocker {\n      background: rgba(255, 0, 0, 0.1);\n      cursor: not-allowed;\n      position: absolute;\n    }\n\n    .zootorial-focuser {\n      background: rgba(0, 0, 0, 0.5);\n      position: absolute;\n    }\n\n    [data-zootorial-actionable] {}\n\n    [data-zootorial-attention] {}\n  </style>\n</div>');

  tempDiv = document.getElementById('zootorial-temp');

  tempDiv.parentNode.insertBefore(tempDiv.children[0], tempDiv);

  tempDiv.parentNode.removeChild(tempDiv);

  zootorial = {
    Tutorial: Tutorial
  };

  window.zootorial = zootorial;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = zootorial;
  }

}).call(this);
